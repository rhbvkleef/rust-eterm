var searchIndex={};
searchIndex["num_bigint"] = {"doc":"A Big integer (signed version: `BigInt`, unsigned version:…","i":[[3,"ParseBigIntError","num_bigint","",null,null],[3,"BigUint","","A big unsigned integer type.",null,null],[3,"BigInt","","A big signed integer type.",null,null],[4,"Sign","","A Sign is a `BigInt`'s composing element.",null,null],[13,"Minus","","",0,null],[13,"NoSign","","",0,null],[13,"Plus","","",0,null],[11,"new","","Creates and initializes a BigInt.",1,[[["sign"],["vec",["u32"]],["u32"]],["bigint"]]],[11,"from_biguint","","Creates and initializes a `BigInt`.",1,[[["sign"],["biguint"]],["bigint"]]],[11,"from_slice","","Creates and initializes a `BigInt`.",1,[[["sign"]],["bigint"]]],[11,"assign_from_slice","","Reinitializes a `BigInt`.",1,[[["sign"],["self"]]]],[11,"from_bytes_be","","Creates and initializes a `BigInt`.",1,[[["sign"]],["bigint"]]],[11,"from_bytes_le","","Creates and initializes a `BigInt`.",1,[[["sign"]],["bigint"]]],[11,"from_signed_bytes_be","","Creates and initializes a `BigInt` from an array of bytes…",1,[[],["bigint"]]],[11,"from_signed_bytes_le","","Creates and initializes a `BigInt` from an array of bytes…",1,[[],["bigint"]]],[11,"parse_bytes","","Creates and initializes a `BigInt`.",1,[[["u32"]],[["option",["bigint"]],["bigint"]]]],[11,"from_radix_be","","Creates and initializes a `BigInt`. Each u8 of the input…",1,[[["sign"],["u32"]],[["option",["bigint"]],["bigint"]]]],[11,"from_radix_le","","Creates and initializes a `BigInt`. Each u8 of the input…",1,[[["sign"],["u32"]],[["option",["bigint"]],["bigint"]]]],[11,"to_bytes_be","","Returns the sign and the byte representation of the…",1,[[["self"]]]],[11,"to_bytes_le","","Returns the sign and the byte representation of the…",1,[[["self"]]]],[11,"to_u32_digits","","Returns the sign and the `u32` digits representation of…",1,[[["self"]]]],[11,"to_signed_bytes_be","","Returns the two's-complement byte representation of the…",1,[[["self"]],[["vec",["u8"]],["u8"]]]],[11,"to_signed_bytes_le","","Returns the two's-complement byte representation of the…",1,[[["self"]],[["vec",["u8"]],["u8"]]]],[11,"to_str_radix","","Returns the integer formatted as a string in the given…",1,[[["u32"],["self"]],["string"]]],[11,"to_radix_be","","Returns the integer in the requested base in big-endian…",1,[[["u32"],["self"]]]],[11,"to_radix_le","","Returns the integer in the requested base in little-endian…",1,[[["u32"],["self"]]]],[11,"sign","","Returns the sign of the `BigInt` as a `Sign`.",1,[[["self"]],["sign"]]],[11,"bits","","Determines the fewest bits necessary to express the…",1,[[["self"]],["usize"]]],[11,"to_biguint","","Converts this `BigInt` into a `BigUint`, if it's not…",1,[[["self"]],[["option",["biguint"]],["biguint"]]]],[11,"checked_add","","",1,[[["bigint"],["self"]],[["option",["bigint"]],["bigint"]]]],[11,"checked_sub","","",1,[[["bigint"],["self"]],[["option",["bigint"]],["bigint"]]]],[11,"checked_mul","","",1,[[["bigint"],["self"]],[["option",["bigint"]],["bigint"]]]],[11,"checked_div","","",1,[[["bigint"],["self"]],[["option",["bigint"]],["bigint"]]]],[11,"modpow","","Returns `(self ^ exponent) mod modulus`",1,[[["self"]],["self"]]],[11,"sqrt","","Returns the truncated principal square root of `self` --…",1,[[["self"]],["self"]]],[11,"cbrt","","Returns the truncated principal cube root of `self` -- see…",1,[[["self"]],["self"]]],[11,"nth_root","","Returns the truncated principal `n`th root of `self` --…",1,[[["u32"],["self"]],["self"]]],[11,"new","","Creates and initializes a `BigUint`.",2,[[["vec",["u32"]],["u32"]],["biguint"]]],[11,"from_slice","","Creates and initializes a `BigUint`.",2,[[],["biguint"]]],[11,"assign_from_slice","","Assign a value to a `BigUint`.",2,[[["self"]]]],[11,"from_bytes_be","","Creates and initializes a `BigUint`.",2,[[],["biguint"]]],[11,"from_bytes_le","","Creates and initializes a `BigUint`.",2,[[],["biguint"]]],[11,"parse_bytes","","Creates and initializes a `BigUint`. The input slice must…",2,[[["u32"]],[["option",["biguint"]],["biguint"]]]],[11,"from_radix_be","","Creates and initializes a `BigUint`. Each u8 of the input…",2,[[["u32"]],[["option",["biguint"]],["biguint"]]]],[11,"from_radix_le","","Creates and initializes a `BigUint`. Each u8 of the input…",2,[[["u32"]],[["option",["biguint"]],["biguint"]]]],[11,"to_bytes_be","","Returns the byte representation of the `BigUint` in…",2,[[["self"]],[["vec",["u8"]],["u8"]]]],[11,"to_bytes_le","","Returns the byte representation of the `BigUint` in…",2,[[["self"]],[["vec",["u8"]],["u8"]]]],[11,"to_u32_digits","","Returns the `u32` digits representation of the `BigUint`…",2,[[["self"]],[["vec",["u32"]],["u32"]]]],[11,"to_str_radix","","Returns the integer formatted as a string in the given…",2,[[["u32"],["self"]],["string"]]],[11,"to_radix_be","","Returns the integer in the requested base in big-endian…",2,[[["u32"],["self"]],[["vec",["u8"]],["u8"]]]],[11,"to_radix_le","","Returns the integer in the requested base in little-endian…",2,[[["u32"],["self"]],[["vec",["u8"]],["u8"]]]],[11,"bits","","Determines the fewest bits necessary to express the…",2,[[["self"]],["usize"]]],[11,"modpow","","Returns `(self ^ exponent) % modulus`.",2,[[["self"]],["self"]]],[11,"sqrt","","Returns the truncated principal square root of `self` --…",2,[[["self"]],["self"]]],[11,"cbrt","","Returns the truncated principal cube root of `self` -- see…",2,[[["self"]],["self"]]],[11,"nth_root","","Returns the truncated principal `n`th root of `self` --…",2,[[["u32"],["self"]],["self"]]],[8,"ToBigUint","","A generic trait for converting a value to a `BigUint`.",null,null],[10,"to_biguint","","Converts the value of `self` to a `BigUint`.",3,[[["self"]],[["option",["biguint"]],["biguint"]]]],[8,"ToBigInt","","A generic trait for converting a value to a `BigInt`. This…",null,null],[10,"to_bigint","","Converts the value of `self` to a `BigInt`.",4,[[["self"]],[["option",["bigint"]],["bigint"]]]],[11,"from","","",5,[[["t"]],["t"]]],[11,"into","","",5,[[],["u"]]],[11,"to_owned","","",5,[[["self"]],["t"]]],[11,"clone_into","","",5,[[["self"],["t"]]]],[11,"to_string","","",5,[[["self"]],["string"]]],[11,"try_from","","",5,[[["u"]],["result"]]],[11,"try_into","","",5,[[],["result"]]],[11,"borrow","","",5,[[["self"]],["t"]]],[11,"borrow_mut","","",5,[[["self"]],["t"]]],[11,"type_id","","",5,[[["self"]],["typeid"]]],[11,"from","","",2,[[["t"]],["t"]]],[11,"into","","",2,[[],["u"]]],[11,"to_owned","","",2,[[["self"]],["t"]]],[11,"clone_into","","",2,[[["self"],["t"]]]],[11,"to_string","","",2,[[["self"]],["string"]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"try_into","","",2,[[],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"type_id","","",2,[[["self"]],["typeid"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"into","","",1,[[],["u"]]],[11,"to_owned","","",1,[[["self"]],["t"]]],[11,"clone_into","","",1,[[["self"],["t"]]]],[11,"to_string","","",1,[[["self"]],["string"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"try_into","","",1,[[],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"type_id","","",1,[[["self"]],["typeid"]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"into","","",0,[[],["u"]]],[11,"to_owned","","",0,[[["self"]],["t"]]],[11,"clone_into","","",0,[[["self"],["t"]]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"try_into","","",0,[[],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"type_id","","",0,[[["self"]],["typeid"]]],[11,"to_bigint","","",1,[[["self"]],[["option",["bigint"]],["bigint"]]]],[11,"to_bigint","","",2,[[["self"]],[["option",["bigint"]],["bigint"]]]],[11,"to_biguint","","",1,[[["self"]],[["option",["biguint"]],["biguint"]]]],[11,"to_biguint","","",2,[[["self"]],[["option",["biguint"]],["biguint"]]]],[11,"from","","",1,[[["i64"]],["self"]]],[11,"from","","",1,[[["i128"]],["self"]]],[11,"from","","",1,[[["i8"]],["self"]]],[11,"from","","",1,[[["i16"]],["self"]]],[11,"from","","",1,[[["i32"]],["self"]]],[11,"from","","",1,[[["isize"]],["self"]]],[11,"from","","",1,[[["u64"]],["self"]]],[11,"from","","",1,[[["u128"]],["self"]]],[11,"from","","",1,[[["u8"]],["self"]]],[11,"from","","",1,[[["u16"]],["self"]]],[11,"from","","",1,[[["u32"]],["self"]]],[11,"from","","",1,[[["usize"]],["self"]]],[11,"from","","",1,[[["biguint"]],["self"]]],[11,"from","","",2,[[["u64"]],["self"]]],[11,"from","","",2,[[["u128"]],["self"]]],[11,"from","","",2,[[["u8"]],["self"]]],[11,"from","","",2,[[["u16"]],["self"]]],[11,"from","","",2,[[["u32"]],["self"]]],[11,"from","","",2,[[["usize"]],["self"]]],[11,"clone","","",0,[[["self"]],["sign"]]],[11,"clone","","",1,[[["self"]],["bigint"]]],[11,"clone","","",2,[[["self"]],["biguint"]]],[11,"clone","","",5,[[["self"]],["parsebiginterror"]]],[11,"default","","",1,[[],["bigint"]]],[11,"default","","",2,[[],["biguint"]]],[11,"cmp","","",0,[[["self"],["sign"]],["ordering"]]],[11,"cmp","","",1,[[["bigint"],["self"]],["ordering"]]],[11,"cmp","","",2,[[["biguint"],["self"]],["ordering"]]],[11,"eq","","",0,[[["self"],["sign"]],["bool"]]],[11,"eq","","",1,[[["bigint"],["self"]],["bool"]]],[11,"eq","","",2,[[["biguint"],["self"]],["bool"]]],[11,"eq","","",5,[[["parsebiginterror"],["self"]],["bool"]]],[11,"ne","","",5,[[["parsebiginterror"],["self"]],["bool"]]],[11,"partial_cmp","","",0,[[["self"],["sign"]],[["option",["ordering"]],["ordering"]]]],[11,"partial_cmp","","",1,[[["bigint"],["self"]],[["ordering"],["option",["ordering"]]]]],[11,"partial_cmp","","",2,[[["biguint"],["self"]],[["ordering"],["option",["ordering"]]]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",1,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",2,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",5,[[["formatter"],["self"]],["result"]]],[11,"div","","",1,[[["bigint"]],["bigint"]]],[11,"div","","",1,[[["bigint"]],["bigint"]]],[11,"div","","",1,[[["u8"]],["bigint"]]],[11,"div","","",1,[[["u8"]],["bigint"]]],[11,"div","","",1,[[["u16"]],["bigint"]]],[11,"div","","",1,[[["u16"]],["bigint"]]],[11,"div","","",1,[[["usize"]],["bigint"]]],[11,"div","","",1,[[["usize"]],["bigint"]]],[11,"div","","",1,[[["i8"]],["bigint"]]],[11,"div","","",1,[[["i8"]],["bigint"]]],[11,"div","","",1,[[["i16"]],["bigint"]]],[11,"div","","",1,[[["i16"]],["bigint"]]],[11,"div","","",1,[[["isize"]],["bigint"]]],[11,"div","","",1,[[["isize"]],["bigint"]]],[11,"div","","",1,[[["u32"]],["bigint"]]],[11,"div","","",1,[[["u64"]],["bigint"]]],[11,"div","","",1,[[["u128"]],["bigint"]]],[11,"div","","",1,[[["u32"]],["bigint"]]],[11,"div","","",1,[[["u64"]],["bigint"]]],[11,"div","","",1,[[["u128"]],["bigint"]]],[11,"div","","",1,[[["i32"]],["bigint"]]],[11,"div","","",1,[[["i64"]],["bigint"]]],[11,"div","","",1,[[["i128"]],["bigint"]]],[11,"div","","",1,[[["i32"]],["bigint"]]],[11,"div","","",1,[[["i64"]],["bigint"]]],[11,"div","","",1,[[["i128"]],["bigint"]]],[11,"div","","",2,[[["biguint"]],["biguint"]]],[11,"div","","",2,[[["biguint"]],["biguint"]]],[11,"div","","",2,[[["u8"]],["biguint"]]],[11,"div","","",2,[[["u8"]],["biguint"]]],[11,"div","","",2,[[["u16"]],["biguint"]]],[11,"div","","",2,[[["u16"]],["biguint"]]],[11,"div","","",2,[[["usize"]],["biguint"]]],[11,"div","","",2,[[["usize"]],["biguint"]]],[11,"div","","",2,[[["u32"]],["biguint"]]],[11,"div","","",2,[[["u64"]],["biguint"]]],[11,"div","","",2,[[["u128"]],["biguint"]]],[11,"div","","",2,[[["u32"]],["biguint"]]],[11,"div","","",2,[[["u64"]],["biguint"]]],[11,"div","","",2,[[["u128"]],["biguint"]]],[11,"rem","","",1,[[["bigint"]],["bigint"]]],[11,"rem","","",1,[[["bigint"]],["bigint"]]],[11,"rem","","",1,[[["u8"]],["bigint"]]],[11,"rem","","",1,[[["u8"]],["bigint"]]],[11,"rem","","",1,[[["u16"]],["bigint"]]],[11,"rem","","",1,[[["u16"]],["bigint"]]],[11,"rem","","",1,[[["usize"]],["bigint"]]],[11,"rem","","",1,[[["usize"]],["bigint"]]],[11,"rem","","",1,[[["i8"]],["bigint"]]],[11,"rem","","",1,[[["i8"]],["bigint"]]],[11,"rem","","",1,[[["i16"]],["bigint"]]],[11,"rem","","",1,[[["i16"]],["bigint"]]],[11,"rem","","",1,[[["isize"]],["bigint"]]],[11,"rem","","",1,[[["isize"]],["bigint"]]],[11,"rem","","",1,[[["u32"]],["bigint"]]],[11,"rem","","",1,[[["u64"]],["bigint"]]],[11,"rem","","",1,[[["u128"]],["bigint"]]],[11,"rem","","",1,[[["u32"]],["bigint"]]],[11,"rem","","",1,[[["u64"]],["bigint"]]],[11,"rem","","",1,[[["u128"]],["bigint"]]],[11,"rem","","",1,[[["i32"]],["bigint"]]],[11,"rem","","",1,[[["i64"]],["bigint"]]],[11,"rem","","",1,[[["i128"]],["bigint"]]],[11,"rem","","",1,[[["i32"]],["bigint"]]],[11,"rem","","",1,[[["i64"]],["bigint"]]],[11,"rem","","",1,[[["i128"]],["bigint"]]],[11,"rem","","",2,[[["biguint"]],["biguint"]]],[11,"rem","","",2,[[["biguint"]],["biguint"]]],[11,"rem","","",2,[[["u8"]],["biguint"]]],[11,"rem","","",2,[[["u8"]],["biguint"]]],[11,"rem","","",2,[[["u16"]],["biguint"]]],[11,"rem","","",2,[[["u16"]],["biguint"]]],[11,"rem","","",2,[[["usize"]],["biguint"]]],[11,"rem","","",2,[[["usize"]],["biguint"]]],[11,"rem","","",2,[[["u32"]],["biguint"]]],[11,"rem","","",2,[[["u32"]],["biguint"]]],[11,"rem","","",2,[[["u64"]],["biguint"]]],[11,"rem","","",2,[[["u128"]],["biguint"]]],[11,"rem","","",2,[[["u64"]],["biguint"]]],[11,"rem","","",2,[[["u128"]],["biguint"]]],[11,"sub","","",1,[[["bigint"]],["bigint"]]],[11,"sub","","",1,[[["bigint"]],["bigint"]]],[11,"sub","","",1,[[["u8"]],["bigint"]]],[11,"sub","","",1,[[["u8"]],["bigint"]]],[11,"sub","","",1,[[["u16"]],["bigint"]]],[11,"sub","","",1,[[["u16"]],["bigint"]]],[11,"sub","","",1,[[["usize"]],["bigint"]]],[11,"sub","","",1,[[["usize"]],["bigint"]]],[11,"sub","","",1,[[["i8"]],["bigint"]]],[11,"sub","","",1,[[["i8"]],["bigint"]]],[11,"sub","","",1,[[["i16"]],["bigint"]]],[11,"sub","","",1,[[["i16"]],["bigint"]]],[11,"sub","","",1,[[["isize"]],["bigint"]]],[11,"sub","","",1,[[["isize"]],["bigint"]]],[11,"sub","","",1,[[["u32"]],["bigint"]]],[11,"sub","","",1,[[["u64"]],["bigint"]]],[11,"sub","","",1,[[["u128"]],["bigint"]]],[11,"sub","","",1,[[["u32"]],["bigint"]]],[11,"sub","","",1,[[["u64"]],["bigint"]]],[11,"sub","","",1,[[["u128"]],["bigint"]]],[11,"sub","","",1,[[["i32"]],["bigint"]]],[11,"sub","","",1,[[["i64"]],["bigint"]]],[11,"sub","","",1,[[["i128"]],["bigint"]]],[11,"sub","","",1,[[["i32"]],["bigint"]]],[11,"sub","","",1,[[["i64"]],["bigint"]]],[11,"sub","","",1,[[["i128"]],["bigint"]]],[11,"sub","","",2,[[["biguint"]],["biguint"]]],[11,"sub","","",2,[[["biguint"]],["biguint"]]],[11,"sub","","",2,[[["u8"]],["biguint"]]],[11,"sub","","",2,[[["u8"]],["biguint"]]],[11,"sub","","",2,[[["u16"]],["biguint"]]],[11,"sub","","",2,[[["u16"]],["biguint"]]],[11,"sub","","",2,[[["usize"]],["biguint"]]],[11,"sub","","",2,[[["usize"]],["biguint"]]],[11,"sub","","",2,[[["u32"]],["biguint"]]],[11,"sub","","",2,[[["u64"]],["biguint"]]],[11,"sub","","",2,[[["u128"]],["biguint"]]],[11,"sub","","",2,[[["u32"]],["biguint"]]],[11,"sub","","",2,[[["u64"]],["biguint"]]],[11,"sub","","",2,[[["u128"]],["biguint"]]],[11,"from_str","","",1,[[["str"]],[["result",["bigint","parsebiginterror"]],["bigint"],["parsebiginterror"]]]],[11,"from_str","","",2,[[["str"]],[["parsebiginterror"],["result",["biguint","parsebiginterror"]],["biguint"]]]],[11,"add","","",1,[[["bigint"]],["bigint"]]],[11,"add","","",1,[[["bigint"]],["bigint"]]],[11,"add","","",1,[[["u8"]],["bigint"]]],[11,"add","","",1,[[["u8"]],["bigint"]]],[11,"add","","",1,[[["u16"]],["bigint"]]],[11,"add","","",1,[[["u16"]],["bigint"]]],[11,"add","","",1,[[["usize"]],["bigint"]]],[11,"add","","",1,[[["usize"]],["bigint"]]],[11,"add","","",1,[[["i8"]],["bigint"]]],[11,"add","","",1,[[["i8"]],["bigint"]]],[11,"add","","",1,[[["i16"]],["bigint"]]],[11,"add","","",1,[[["i16"]],["bigint"]]],[11,"add","","",1,[[["isize"]],["bigint"]]],[11,"add","","",1,[[["isize"]],["bigint"]]],[11,"add","","",1,[[["u32"]],["bigint"]]],[11,"add","","",1,[[["u64"]],["bigint"]]],[11,"add","","",1,[[["u128"]],["bigint"]]],[11,"add","","",1,[[["u32"]],["bigint"]]],[11,"add","","",1,[[["u64"]],["bigint"]]],[11,"add","","",1,[[["u128"]],["bigint"]]],[11,"add","","",1,[[["i32"]],["bigint"]]],[11,"add","","",1,[[["i64"]],["bigint"]]],[11,"add","","",1,[[["i128"]],["bigint"]]],[11,"add","","",1,[[["i32"]],["bigint"]]],[11,"add","","",1,[[["i64"]],["bigint"]]],[11,"add","","",1,[[["i128"]],["bigint"]]],[11,"add","","",2,[[["biguint"]],["biguint"]]],[11,"add","","",2,[[["biguint"]],["biguint"]]],[11,"add","","",2,[[["u8"]],["biguint"]]],[11,"add","","",2,[[["u8"]],["biguint"]]],[11,"add","","",2,[[["u16"]],["biguint"]]],[11,"add","","",2,[[["u16"]],["biguint"]]],[11,"add","","",2,[[["usize"]],["biguint"]]],[11,"add","","",2,[[["usize"]],["biguint"]]],[11,"add","","",2,[[["u32"]],["biguint"]]],[11,"add","","",2,[[["u64"]],["biguint"]]],[11,"add","","",2,[[["u128"]],["biguint"]]],[11,"add","","",2,[[["u32"]],["biguint"]]],[11,"add","","",2,[[["u64"]],["biguint"]]],[11,"add","","",2,[[["u128"]],["biguint"]]],[11,"mul","","",0,[[["sign"]],["sign"]]],[11,"mul","","",1,[[["bigint"]],["bigint"]]],[11,"mul","","",1,[[["bigint"]],["bigint"]]],[11,"mul","","",1,[[["u8"]],["bigint"]]],[11,"mul","","",1,[[["u8"]],["bigint"]]],[11,"mul","","",1,[[["u16"]],["bigint"]]],[11,"mul","","",1,[[["u16"]],["bigint"]]],[11,"mul","","",1,[[["usize"]],["bigint"]]],[11,"mul","","",1,[[["usize"]],["bigint"]]],[11,"mul","","",1,[[["i8"]],["bigint"]]],[11,"mul","","",1,[[["i8"]],["bigint"]]],[11,"mul","","",1,[[["i16"]],["bigint"]]],[11,"mul","","",1,[[["i16"]],["bigint"]]],[11,"mul","","",1,[[["isize"]],["bigint"]]],[11,"mul","","",1,[[["isize"]],["bigint"]]],[11,"mul","","",1,[[["u32"]],["bigint"]]],[11,"mul","","",1,[[["u64"]],["bigint"]]],[11,"mul","","",1,[[["u128"]],["bigint"]]],[11,"mul","","",1,[[["u32"]],["bigint"]]],[11,"mul","","",1,[[["u64"]],["bigint"]]],[11,"mul","","",1,[[["u128"]],["bigint"]]],[11,"mul","","",1,[[["i32"]],["bigint"]]],[11,"mul","","",1,[[["i64"]],["bigint"]]],[11,"mul","","",1,[[["i128"]],["bigint"]]],[11,"mul","","",1,[[["i32"]],["bigint"]]],[11,"mul","","",1,[[["i64"]],["bigint"]]],[11,"mul","","",1,[[["i128"]],["bigint"]]],[11,"mul","","",2,[[["biguint"]],["biguint"]]],[11,"mul","","",2,[[["biguint"]],["biguint"]]],[11,"mul","","",2,[[["u8"]],["biguint"]]],[11,"mul","","",2,[[["u8"]],["biguint"]]],[11,"mul","","",2,[[["u16"]],["biguint"]]],[11,"mul","","",2,[[["u16"]],["biguint"]]],[11,"mul","","",2,[[["usize"]],["biguint"]]],[11,"mul","","",2,[[["usize"]],["biguint"]]],[11,"mul","","",2,[[["u32"]],["biguint"]]],[11,"mul","","",2,[[["u64"]],["biguint"]]],[11,"mul","","",2,[[["u128"]],["biguint"]]],[11,"mul","","",2,[[["u32"]],["biguint"]]],[11,"mul","","",2,[[["u64"]],["biguint"]]],[11,"mul","","",2,[[["u128"]],["biguint"]]],[11,"neg","","Negate Sign value.",0,[[],["sign"]]],[11,"neg","","",1,[[],["bigint"]]],[11,"neg","","",2,[[],["biguint"]]],[11,"add_assign","","",1,[[["self"],["bigint"]]]],[11,"add_assign","","",1,[[["self"],["bigint"]]]],[11,"add_assign","","",1,[[["self"],["u8"]]]],[11,"add_assign","","",1,[[["u16"],["self"]]]],[11,"add_assign","","",1,[[["self"],["usize"]]]],[11,"add_assign","","",1,[[["self"],["i8"]]]],[11,"add_assign","","",1,[[["self"],["i16"]]]],[11,"add_assign","","",1,[[["isize"],["self"]]]],[11,"add_assign","","",1,[[["self"],["u32"]]]],[11,"add_assign","","",1,[[["self"],["u64"]]]],[11,"add_assign","","",1,[[["self"],["u128"]]]],[11,"add_assign","","",1,[[["self"],["i32"]]]],[11,"add_assign","","",1,[[["i64"],["self"]]]],[11,"add_assign","","",1,[[["self"],["i128"]]]],[11,"add_assign","","",2,[[["self"],["biguint"]]]],[11,"add_assign","","",2,[[["self"],["biguint"]]]],[11,"add_assign","","",2,[[["self"],["u8"]]]],[11,"add_assign","","",2,[[["u16"],["self"]]]],[11,"add_assign","","",2,[[["self"],["usize"]]]],[11,"add_assign","","",2,[[["self"],["u32"]]]],[11,"add_assign","","",2,[[["self"],["u64"]]]],[11,"add_assign","","",2,[[["self"],["u128"]]]],[11,"sub_assign","","",1,[[["self"],["bigint"]]]],[11,"sub_assign","","",1,[[["self"],["bigint"]]]],[11,"sub_assign","","",1,[[["self"],["u8"]]]],[11,"sub_assign","","",1,[[["u16"],["self"]]]],[11,"sub_assign","","",1,[[["self"],["usize"]]]],[11,"sub_assign","","",1,[[["self"],["i8"]]]],[11,"sub_assign","","",1,[[["self"],["i16"]]]],[11,"sub_assign","","",1,[[["isize"],["self"]]]],[11,"sub_assign","","",1,[[["self"],["u32"]]]],[11,"sub_assign","","",1,[[["self"],["u64"]]]],[11,"sub_assign","","",1,[[["self"],["u128"]]]],[11,"sub_assign","","",1,[[["self"],["i32"]]]],[11,"sub_assign","","",1,[[["i64"],["self"]]]],[11,"sub_assign","","",1,[[["self"],["i128"]]]],[11,"sub_assign","","",2,[[["self"],["biguint"]]]],[11,"sub_assign","","",2,[[["biguint"],["self"]]]],[11,"sub_assign","","",2,[[["self"],["u8"]]]],[11,"sub_assign","","",2,[[["u16"],["self"]]]],[11,"sub_assign","","",2,[[["self"],["usize"]]]],[11,"sub_assign","","",2,[[["self"],["u32"]]]],[11,"sub_assign","","",2,[[["self"],["u64"]]]],[11,"sub_assign","","",2,[[["self"],["u128"]]]],[11,"mul_assign","","",1,[[["self"],["bigint"]]]],[11,"mul_assign","","",1,[[["self"],["bigint"]]]],[11,"mul_assign","","",1,[[["self"],["u8"]]]],[11,"mul_assign","","",1,[[["u16"],["self"]]]],[11,"mul_assign","","",1,[[["self"],["usize"]]]],[11,"mul_assign","","",1,[[["self"],["i8"]]]],[11,"mul_assign","","",1,[[["self"],["i16"]]]],[11,"mul_assign","","",1,[[["isize"],["self"]]]],[11,"mul_assign","","",1,[[["self"],["u32"]]]],[11,"mul_assign","","",1,[[["self"],["u64"]]]],[11,"mul_assign","","",1,[[["self"],["u128"]]]],[11,"mul_assign","","",1,[[["self"],["i32"]]]],[11,"mul_assign","","",1,[[["i64"],["self"]]]],[11,"mul_assign","","",1,[[["self"],["i128"]]]],[11,"mul_assign","","",2,[[["self"],["biguint"]]]],[11,"mul_assign","","",2,[[["biguint"],["self"]]]],[11,"mul_assign","","",2,[[["self"],["u8"]]]],[11,"mul_assign","","",2,[[["u16"],["self"]]]],[11,"mul_assign","","",2,[[["self"],["usize"]]]],[11,"mul_assign","","",2,[[["self"],["u32"]]]],[11,"mul_assign","","",2,[[["self"],["u64"]]]],[11,"mul_assign","","",2,[[["self"],["u128"]]]],[11,"div_assign","","",1,[[["self"],["bigint"]]]],[11,"div_assign","","",1,[[["self"],["bigint"]]]],[11,"div_assign","","",1,[[["self"],["u8"]]]],[11,"div_assign","","",1,[[["u16"],["self"]]]],[11,"div_assign","","",1,[[["self"],["usize"]]]],[11,"div_assign","","",1,[[["self"],["i8"]]]],[11,"div_assign","","",1,[[["self"],["i16"]]]],[11,"div_assign","","",1,[[["isize"],["self"]]]],[11,"div_assign","","",1,[[["self"],["u32"]]]],[11,"div_assign","","",1,[[["self"],["u64"]]]],[11,"div_assign","","",1,[[["self"],["u128"]]]],[11,"div_assign","","",1,[[["self"],["i32"]]]],[11,"div_assign","","",1,[[["i64"],["self"]]]],[11,"div_assign","","",1,[[["self"],["i128"]]]],[11,"div_assign","","",2,[[["self"],["biguint"]]]],[11,"div_assign","","",2,[[["biguint"],["self"]]]],[11,"div_assign","","",2,[[["self"],["u8"]]]],[11,"div_assign","","",2,[[["u16"],["self"]]]],[11,"div_assign","","",2,[[["self"],["usize"]]]],[11,"div_assign","","",2,[[["self"],["u32"]]]],[11,"div_assign","","",2,[[["self"],["u64"]]]],[11,"div_assign","","",2,[[["self"],["u128"]]]],[11,"rem_assign","","",1,[[["self"],["bigint"]]]],[11,"rem_assign","","",1,[[["self"],["bigint"]]]],[11,"rem_assign","","",1,[[["self"],["u8"]]]],[11,"rem_assign","","",1,[[["u16"],["self"]]]],[11,"rem_assign","","",1,[[["self"],["usize"]]]],[11,"rem_assign","","",1,[[["self"],["i8"]]]],[11,"rem_assign","","",1,[[["self"],["i16"]]]],[11,"rem_assign","","",1,[[["isize"],["self"]]]],[11,"rem_assign","","",1,[[["self"],["u32"]]]],[11,"rem_assign","","",1,[[["self"],["u64"]]]],[11,"rem_assign","","",1,[[["self"],["u128"]]]],[11,"rem_assign","","",1,[[["self"],["i32"]]]],[11,"rem_assign","","",1,[[["i64"],["self"]]]],[11,"rem_assign","","",1,[[["self"],["i128"]]]],[11,"rem_assign","","",2,[[["self"],["biguint"]]]],[11,"rem_assign","","",2,[[["self"],["biguint"]]]],[11,"rem_assign","","",2,[[["self"],["u8"]]]],[11,"rem_assign","","",2,[[["u16"],["self"]]]],[11,"rem_assign","","",2,[[["self"],["usize"]]]],[11,"rem_assign","","",2,[[["self"],["u32"]]]],[11,"rem_assign","","",2,[[["self"],["u64"]]]],[11,"rem_assign","","",2,[[["self"],["u128"]]]],[11,"not","","",1,[[],["bigint"]]],[11,"bitand","","",1,[[["bigint"]],["bigint"]]],[11,"bitand","","",1,[[["bigint"]],["bigint"]]],[11,"bitand","","",2,[[["biguint"]],["biguint"]]],[11,"bitand","","",2,[[["biguint"]],["biguint"]]],[11,"bitor","","",1,[[["bigint"]],["bigint"]]],[11,"bitor","","",1,[[["bigint"]],["bigint"]]],[11,"bitor","","",2,[[["biguint"]],["biguint"]]],[11,"bitor","","",2,[[["biguint"]],["biguint"]]],[11,"bitxor","","",1,[[["bigint"]],["bigint"]]],[11,"bitxor","","",1,[[["bigint"]],["bigint"]]],[11,"bitxor","","",2,[[["biguint"]],["biguint"]]],[11,"bitxor","","",2,[[["biguint"]],["biguint"]]],[11,"shl","","",1,[[["usize"]],["bigint"]]],[11,"shl","","",2,[[["usize"]],["biguint"]]],[11,"shr","","",1,[[["usize"]],["bigint"]]],[11,"shr","","",2,[[["usize"]],["biguint"]]],[11,"bitand_assign","","",1,[[["self"],["bigint"]]]],[11,"bitand_assign","","",1,[[["self"],["bigint"]]]],[11,"bitand_assign","","",2,[[["self"],["biguint"]]]],[11,"bitand_assign","","",2,[[["self"],["biguint"]]]],[11,"bitor_assign","","",1,[[["self"],["bigint"]]]],[11,"bitor_assign","","",1,[[["self"],["bigint"]]]],[11,"bitor_assign","","",2,[[["self"],["biguint"]]]],[11,"bitor_assign","","",2,[[["self"],["biguint"]]]],[11,"bitxor_assign","","",1,[[["self"],["bigint"]]]],[11,"bitxor_assign","","",1,[[["self"],["bigint"]]]],[11,"bitxor_assign","","",2,[[["self"],["biguint"]]]],[11,"bitxor_assign","","",2,[[["self"],["biguint"]]]],[11,"shl_assign","","",1,[[["self"],["usize"]]]],[11,"shl_assign","","",2,[[["self"],["usize"]]]],[11,"shr_assign","","",1,[[["self"],["usize"]]]],[11,"shr_assign","","",2,[[["self"],["usize"]]]],[11,"hash","","",0,[[["self"],["__h"]]]],[11,"hash","","",1,[[["self"],["__h"]]]],[11,"hash","","",2,[[["self"],["__h"]]]],[11,"sum","","",1,[[["i"]],["self"]]],[11,"sum","","",2,[[["i"]],["self"]]],[11,"product","","",1,[[["i"]],["self"]]],[11,"product","","",2,[[["i"]],["self"]]],[11,"fmt","","",1,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",2,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",1,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",2,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",1,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",2,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",1,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",2,[[["formatter"],["self"]],["result"]]],[11,"description","","",5,[[["self"]],["str"]]],[11,"nth_root","","",1,[[["u32"],["self"]],["self"]]],[11,"sqrt","","",1,[[["self"]],["self"]]],[11,"cbrt","","",1,[[["self"]],["self"]]],[11,"nth_root","","",2,[[["u32"],["self"]],["self"]]],[11,"sqrt","","",2,[[["self"]],["self"]]],[11,"cbrt","","",2,[[["self"]],["self"]]],[11,"div_rem","","",1,[[["bigint"],["self"]]]],[11,"div_floor","","",1,[[["bigint"],["self"]],["bigint"]]],[11,"mod_floor","","",1,[[["bigint"],["self"]],["bigint"]]],[11,"div_mod_floor","","",1,[[["bigint"],["self"]]]],[11,"gcd","","Calculates the Greatest Common Divisor (GCD) of the number…",1,[[["bigint"],["self"]],["bigint"]]],[11,"lcm","","Calculates the Lowest Common Multiple (LCM) of the number…",1,[[["bigint"],["self"]],["bigint"]]],[11,"divides","","Deprecated, use `is_multiple_of` instead.",1,[[["bigint"],["self"]],["bool"]]],[11,"is_multiple_of","","Returns `true` if the number is a multiple of `other`.",1,[[["bigint"],["self"]],["bool"]]],[11,"is_even","","Returns `true` if the number is divisible by `2`.",1,[[["self"]],["bool"]]],[11,"is_odd","","Returns `true` if the number is not divisible by `2`.",1,[[["self"]],["bool"]]],[11,"div_rem","","",2,[[["biguint"],["self"]]]],[11,"div_floor","","",2,[[["biguint"],["self"]],["biguint"]]],[11,"mod_floor","","",2,[[["biguint"],["self"]],["biguint"]]],[11,"div_mod_floor","","",2,[[["biguint"],["self"]]]],[11,"gcd","","Calculates the Greatest Common Divisor (GCD) of the number…",2,[[["self"]],["self"]]],[11,"lcm","","Calculates the Lowest Common Multiple (LCM) of the number…",2,[[["biguint"],["self"]],["biguint"]]],[11,"divides","","Deprecated, use `is_multiple_of` instead.",2,[[["biguint"],["self"]],["bool"]]],[11,"is_multiple_of","","Returns `true` if the number is a multiple of `other`.",2,[[["biguint"],["self"]],["bool"]]],[11,"is_even","","Returns `true` if the number is divisible by `2`.",2,[[["self"]],["bool"]]],[11,"is_odd","","Returns `true` if the number is not divisible by `2`.",2,[[["self"]],["bool"]]],[11,"to_i64","","",1,[[["self"]],[["option",["i64"]],["i64"]]]],[11,"to_i128","","",1,[[["self"]],[["i128"],["option",["i128"]]]]],[11,"to_u64","","",1,[[["self"]],[["option",["u64"]],["u64"]]]],[11,"to_u128","","",1,[[["self"]],[["option",["u128"]],["u128"]]]],[11,"to_f32","","",1,[[["self"]],[["f32"],["option",["f32"]]]]],[11,"to_f64","","",1,[[["self"]],[["f64"],["option",["f64"]]]]],[11,"to_i64","","",2,[[["self"]],[["option",["i64"]],["i64"]]]],[11,"to_i128","","",2,[[["self"]],[["i128"],["option",["i128"]]]]],[11,"to_u64","","",2,[[["self"]],[["option",["u64"]],["u64"]]]],[11,"to_u128","","",2,[[["self"]],[["option",["u128"]],["u128"]]]],[11,"to_f32","","",2,[[["self"]],[["f32"],["option",["f32"]]]]],[11,"to_f64","","",2,[[["self"]],[["f64"],["option",["f64"]]]]],[11,"from_i64","","",1,[[["i64"]],[["option",["bigint"]],["bigint"]]]],[11,"from_i128","","",1,[[["i128"]],[["option",["bigint"]],["bigint"]]]],[11,"from_u64","","",1,[[["u64"]],[["option",["bigint"]],["bigint"]]]],[11,"from_u128","","",1,[[["u128"]],[["option",["bigint"]],["bigint"]]]],[11,"from_f64","","",1,[[["f64"]],[["option",["bigint"]],["bigint"]]]],[11,"from_i64","","",2,[[["i64"]],[["option",["biguint"]],["biguint"]]]],[11,"from_i128","","",2,[[["i128"]],[["option",["biguint"]],["biguint"]]]],[11,"from_u64","","",2,[[["u64"]],[["option",["biguint"]],["biguint"]]]],[11,"from_u128","","",2,[[["u128"]],[["option",["biguint"]],["biguint"]]]],[11,"from_f64","","",2,[[["f64"]],[["option",["biguint"]],["biguint"]]]],[11,"from_str_radix","","Creates and initializes a BigInt.",1,[[["str"],["u32"]],[["result",["bigint","parsebiginterror"]],["bigint"],["parsebiginterror"]]]],[11,"from_str_radix","","Creates and initializes a `BigUint`.",2,[[["str"],["u32"]],[["parsebiginterror"],["result",["biguint","parsebiginterror"]],["biguint"]]]],[11,"zero","","",1,[[],["bigint"]]],[11,"set_zero","","",1,[[["self"]]]],[11,"is_zero","","",1,[[["self"]],["bool"]]],[11,"zero","","",2,[[],["biguint"]]],[11,"set_zero","","",2,[[["self"]]]],[11,"is_zero","","",2,[[["self"]],["bool"]]],[11,"one","","",1,[[],["bigint"]]],[11,"set_one","","",1,[[["self"]]]],[11,"is_one","","",1,[[["self"]],["bool"]]],[11,"one","","",2,[[],["biguint"]]],[11,"set_one","","",2,[[["self"]]]],[11,"is_one","","",2,[[["self"]],["bool"]]],[11,"checked_add","","",1,[[["bigint"],["self"]],[["option",["bigint"]],["bigint"]]]],[11,"checked_add","","",2,[[["biguint"],["self"]],[["option",["biguint"]],["biguint"]]]],[11,"checked_sub","","",1,[[["bigint"],["self"]],[["option",["bigint"]],["bigint"]]]],[11,"checked_sub","","",2,[[["biguint"],["self"]],[["option",["biguint"]],["biguint"]]]],[11,"checked_mul","","",1,[[["bigint"],["self"]],[["option",["bigint"]],["bigint"]]]],[11,"checked_mul","","",2,[[["biguint"],["self"]],[["option",["biguint"]],["biguint"]]]],[11,"checked_div","","",1,[[["bigint"],["self"]],[["option",["bigint"]],["bigint"]]]],[11,"checked_div","","",2,[[["biguint"],["self"]],[["option",["biguint"]],["biguint"]]]],[11,"abs","","",1,[[["self"]],["bigint"]]],[11,"abs_sub","","",1,[[["bigint"],["self"]],["bigint"]]],[11,"signum","","",1,[[["self"]],["bigint"]]],[11,"is_positive","","",1,[[["self"]],["bool"]]],[11,"is_negative","","",1,[[["self"]],["bool"]]]],"p":[[4,"Sign"],[3,"BigInt"],[3,"BigUint"],[8,"ToBigUint"],[8,"ToBigInt"],[3,"ParseBigIntError"]]};
searchIndex["num_integer"] = {"doc":"Integer trait and functions.","i":[[3,"ExtendedGcd","num_integer","Greatest common divisor and Bézout coefficients",null,null],[12,"gcd","","",0,null],[12,"x","","",0,null],[12,"y","","",0,null],[3,"IterBinomial","","An iterator over binomial coefficients.",null,null],[5,"cbrt","","Returns the truncated principal cube root of an integer --…",null,[[["roots"]],["roots"]]],[5,"nth_root","","Returns the truncated principal `n`th root of an integer…",null,[[["roots"],["u32"]],["roots"]]],[5,"sqrt","","Returns the truncated principal square root of an integer…",null,[[["roots"]],["roots"]]],[5,"div_rem","","Simultaneous integer division and modulus",null,[[["integer"]]]],[5,"div_floor","","Floored integer division",null,[[["integer"]],["integer"]]],[5,"mod_floor","","Floored integer modulus",null,[[["integer"]],["integer"]]],[5,"div_mod_floor","","Simultaneous floored integer division and modulus",null,[[["integer"]]]],[5,"div_ceil","","Ceiled integer division",null,[[["integer"]],["integer"]]],[5,"gcd","","Calculates the Greatest Common Divisor (GCD) of the number…",null,[[["integer"]],["integer"]]],[5,"lcm","","Calculates the Lowest Common Multiple (LCM) of the number…",null,[[["integer"]],["integer"]]],[5,"gcd_lcm","","Calculates the Greatest Common Divisor (GCD) and Lowest…",null,[[["integer"]]]],[5,"binomial","","Calculate the binomial coefficient.",null,[[["integer"],["clone"]],[["integer"],["clone"]]]],[5,"multinomial","","Calculate the multinomial coefficient.",null,[[],[["integer"],["clone"]]]],[8,"Roots","","Provides methods to compute an integer's square root, cube…",null,null],[10,"nth_root","","Returns the truncated principal `n`th root of an integer…",1,[[["u32"],["self"]],["self"]]],[11,"sqrt","","Returns the truncated principal square root of an integer…",1,[[["self"]],["self"]]],[11,"cbrt","","Returns the truncated principal cube root of an integer --…",1,[[["self"]],["self"]]],[8,"Integer","","",null,null],[10,"div_floor","","Floored integer division.",2,[[["self"]],["self"]]],[10,"mod_floor","","Floored integer modulo, satisfying:",2,[[["self"]],["self"]]],[11,"div_ceil","","Ceiled integer division.",2,[[["self"]],["self"]]],[10,"gcd","","Greatest Common Divisor (GCD).",2,[[["self"]],["self"]]],[10,"lcm","","Lowest Common Multiple (LCM).",2,[[["self"]],["self"]]],[11,"gcd_lcm","","Greatest Common Divisor (GCD) and Lowest Common Multiple…",2,[[["self"]]]],[11,"extended_gcd","","Greatest common divisor and Bézout coefficients.",2,[[["self"]],["extendedgcd"]]],[11,"extended_gcd_lcm","","Greatest common divisor, least common multiple, and Bézout…",2,[[["self"]]]],[10,"divides","","Deprecated, use `is_multiple_of` instead.",2,[[["self"]],["bool"]]],[10,"is_multiple_of","","Returns `true` if `self` is a multiple of `other`.",2,[[["self"]],["bool"]]],[10,"is_even","","Returns `true` if the number is even.",2,[[["self"]],["bool"]]],[10,"is_odd","","Returns `true` if the number is odd.",2,[[["self"]],["bool"]]],[10,"div_rem","","Simultaneous truncated integer division and modulus.…",2,[[["self"]]]],[11,"div_mod_floor","","Simultaneous floored integer division and modulus. Returns…",2,[[["self"]]]],[11,"next_multiple_of","","Rounds up to nearest multiple of argument.",2,[[["self"]],["self"]]],[11,"prev_multiple_of","","Rounds down to nearest multiple of argument.",2,[[["self"]],["self"]]],[11,"new","","For a given n, iterate over all binomial coefficients…",3,[[["t"]],["iterbinomial"]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"into","","",0,[[],["u"]]],[11,"try_into","","",0,[[],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"type_id","","",0,[[["self"]],["typeid"]]],[11,"to_owned","","",0,[[["self"]],["t"]]],[11,"clone_into","","",0,[[["self"],["t"]]]],[11,"from","","",3,[[["t"]],["t"]]],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"into_iter","","",3,[[],["i"]]],[11,"into","","",3,[[],["u"]]],[11,"try_into","","",3,[[],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"type_id","","",3,[[["self"]],["typeid"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"eq","","",0,[[["self"],["extendedgcd"]],["bool"]]],[11,"ne","","",0,[[["self"],["extendedgcd"]],["bool"]]],[11,"next","","",3,[[["self"]],["option"]]],[11,"clone","","",0,[[["self"]],["extendedgcd"]]],[11,"sqrt","","Returns the truncated principal square root of an integer…",1,[[["self"]],["self"]]],[11,"cbrt","","Returns the truncated principal cube root of an integer --…",1,[[["self"]],["self"]]]],"p":[[3,"ExtendedGcd"],[8,"Roots"],[8,"Integer"],[3,"IterBinomial"]]};
searchIndex["num_traits"] = {"doc":"Numeric traits for generic mathematics","i":[[3,"ParseFloatError","num_traits","",null,null],[12,"kind","","",0,null],[4,"FloatErrorKind","","",null,null],[13,"Empty","","",1,null],[13,"Invalid","","",1,null],[5,"clamp","","A value bounded by a minimum and a maximum",null,[[["partialord"]],["partialord"]]],[5,"clamp_min","","A value bounded by a minimum value",null,[[["partialord"]],["partialord"]]],[5,"clamp_max","","A value bounded by a maximum value",null,[[["partialord"]],["partialord"]]],[0,"bounds","","",null,null],[8,"Bounded","num_traits::bounds","Numbers which have upper and lower bounds",null,null],[10,"min_value","","returns the smallest finite number this type can represent",2,[[],["self"]]],[10,"max_value","","returns the largest finite number this type can represent",2,[[],["self"]]],[0,"cast","num_traits","",null,null],[5,"cast","num_traits::cast","Cast from one machine scalar to another.",null,[[["numcast"]],[["numcast"],["option"]]]],[8,"ToPrimitive","","A generic trait for converting a value to a number.",null,null],[11,"to_isize","","Converts the value of `self` to an `isize`. If the value…",3,[[["self"]],[["option",["isize"]],["isize"]]]],[11,"to_i8","","Converts the value of `self` to an `i8`. If the value…",3,[[["self"]],[["option",["i8"]],["i8"]]]],[11,"to_i16","","Converts the value of `self` to an `i16`. If the value…",3,[[["self"]],[["option",["i16"]],["i16"]]]],[11,"to_i32","","Converts the value of `self` to an `i32`. If the value…",3,[[["self"]],[["option",["i32"]],["i32"]]]],[10,"to_i64","","Converts the value of `self` to an `i64`. If the value…",3,[[["self"]],[["i64"],["option",["i64"]]]]],[11,"to_i128","","Converts the value of `self` to an `i128`. If the value…",3,[[["self"]],[["option",["i128"]],["i128"]]]],[11,"to_usize","","Converts the value of `self` to a `usize`. If the value…",3,[[["self"]],[["option",["usize"]],["usize"]]]],[11,"to_u8","","Converts the value of `self` to a `u8`. If the value…",3,[[["self"]],[["option",["u8"]],["u8"]]]],[11,"to_u16","","Converts the value of `self` to a `u16`. If the value…",3,[[["self"]],[["u16"],["option",["u16"]]]]],[11,"to_u32","","Converts the value of `self` to a `u32`. If the value…",3,[[["self"]],[["option",["u32"]],["u32"]]]],[10,"to_u64","","Converts the value of `self` to a `u64`. If the value…",3,[[["self"]],[["option",["u64"]],["u64"]]]],[11,"to_u128","","Converts the value of `self` to a `u128`. If the value…",3,[[["self"]],[["option",["u128"]],["u128"]]]],[11,"to_f32","","Converts the value of `self` to an `f32`. If the value…",3,[[["self"]],[["option",["f32"]],["f32"]]]],[11,"to_f64","","Converts the value of `self` to an `f64`. If the value…",3,[[["self"]],[["option",["f64"]],["f64"]]]],[8,"FromPrimitive","","A generic trait for converting a number to a value.",null,null],[11,"from_isize","","Converts an `isize` to return an optional value of this…",4,[[["isize"]],["option"]]],[11,"from_i8","","Converts an `i8` to return an optional value of this type.…",4,[[["i8"]],["option"]]],[11,"from_i16","","Converts an `i16` to return an optional value of this…",4,[[["i16"]],["option"]]],[11,"from_i32","","Converts an `i32` to return an optional value of this…",4,[[["i32"]],["option"]]],[10,"from_i64","","Converts an `i64` to return an optional value of this…",4,[[["i64"]],["option"]]],[11,"from_i128","","Converts an `i128` to return an optional value of this…",4,[[["i128"]],["option"]]],[11,"from_usize","","Converts a `usize` to return an optional value of this…",4,[[["usize"]],["option"]]],[11,"from_u8","","Converts an `u8` to return an optional value of this type.…",4,[[["u8"]],["option"]]],[11,"from_u16","","Converts an `u16` to return an optional value of this…",4,[[["u16"]],["option"]]],[11,"from_u32","","Converts an `u32` to return an optional value of this…",4,[[["u32"]],["option"]]],[10,"from_u64","","Converts an `u64` to return an optional value of this…",4,[[["u64"]],["option"]]],[11,"from_u128","","Converts an `u128` to return an optional value of this…",4,[[["u128"]],["option"]]],[11,"from_f32","","Converts a `f32` to return an optional value of this type.…",4,[[["f32"]],["option"]]],[11,"from_f64","","Converts a `f64` to return an optional value of this type.…",4,[[["f64"]],["option"]]],[8,"NumCast","","An interface for casting between machine scalars.",null,null],[10,"from","","Creates a number from another value that can be converted…",5,[[["toprimitive"]],["option"]]],[8,"AsPrimitive","","A generic interface for casting between machine scalars…",null,null],[10,"as_","","Convert a value to another, using the `as` operator.",6,[[],["t"]]],[0,"float","num_traits","",null,null],[8,"FloatCore","num_traits::float","Generic trait for floating point numbers that works with…",null,null],[10,"infinity","","Returns positive infinity.",7,[[],["self"]]],[10,"neg_infinity","","Returns negative infinity.",7,[[],["self"]]],[10,"nan","","Returns NaN.",7,[[],["self"]]],[10,"neg_zero","","Returns `-0.0`.",7,[[],["self"]]],[10,"min_value","","Returns the smallest finite value that this type can…",7,[[],["self"]]],[10,"min_positive_value","","Returns the smallest positive, normalized value that this…",7,[[],["self"]]],[10,"epsilon","","Returns epsilon, a small positive value.",7,[[],["self"]]],[10,"max_value","","Returns the largest finite value that this type can…",7,[[],["self"]]],[11,"is_nan","","Returns `true` if the number is NaN.",7,[[],["bool"]]],[11,"is_infinite","","Returns `true` if the number is infinite.",7,[[],["bool"]]],[11,"is_finite","","Returns `true` if the number is neither infinite or NaN.",7,[[],["bool"]]],[11,"is_normal","","Returns `true` if the number is neither zero, infinite,…",7,[[],["bool"]]],[10,"classify","","Returns the floating point category of the number. If only…",7,[[],["fpcategory"]]],[11,"floor","","Returns the largest integer less than or equal to a number.",7,[[],["self"]]],[11,"ceil","","Returns the smallest integer greater than or equal to a…",7,[[],["self"]]],[11,"round","","Returns the nearest integer to a number. Round half-way…",7,[[],["self"]]],[11,"trunc","","Return the integer part of a number.",7,[[],["self"]]],[11,"fract","","Returns the fractional part of a number.",7,[[],["self"]]],[11,"abs","","Computes the absolute value of `self`. Returns…",7,[[],["self"]]],[11,"signum","","Returns a number that represents the sign of `self`.",7,[[],["self"]]],[11,"is_sign_positive","","Returns `true` if `self` is positive, including `+0.0` and…",7,[[],["bool"]]],[11,"is_sign_negative","","Returns `true` if `self` is negative, including `-0.0` and…",7,[[],["bool"]]],[11,"min","","Returns the minimum of the two numbers.",7,[[],["self"]]],[11,"max","","Returns the maximum of the two numbers.",7,[[],["self"]]],[11,"recip","","Returns the reciprocal (multiplicative inverse) of the…",7,[[],["self"]]],[11,"powi","","Raise a number to an integer power.",7,[[["i32"]],["self"]]],[10,"to_degrees","","Converts to degrees, assuming the number is in radians.",7,[[],["self"]]],[10,"to_radians","","Converts to radians, assuming the number is in degrees.",7,[[],["self"]]],[10,"integer_decode","","Returns the mantissa, base 2 exponent, and sign as…",7,[[]]],[8,"Float","","Generic trait for floating point numbers",null,null],[10,"nan","","Returns the `NaN` value.",8,[[],["self"]]],[10,"infinity","","Returns the infinite value.",8,[[],["self"]]],[10,"neg_infinity","","Returns the negative infinite value.",8,[[],["self"]]],[10,"neg_zero","","Returns `-0.0`.",8,[[],["self"]]],[10,"min_value","","Returns the smallest finite value that this type can…",8,[[],["self"]]],[10,"min_positive_value","","Returns the smallest positive, normalized value that this…",8,[[],["self"]]],[11,"epsilon","","Returns epsilon, a small positive value.",8,[[],["self"]]],[10,"max_value","","Returns the largest finite value that this type can…",8,[[],["self"]]],[10,"is_nan","","Returns `true` if this value is `NaN` and false otherwise.",8,[[],["bool"]]],[10,"is_infinite","","Returns `true` if this value is positive infinity or…",8,[[],["bool"]]],[10,"is_finite","","Returns `true` if this number is neither infinite nor `NaN`.",8,[[],["bool"]]],[10,"is_normal","","Returns `true` if the number is neither zero, infinite,…",8,[[],["bool"]]],[10,"classify","","Returns the floating point category of the number. If only…",8,[[],["fpcategory"]]],[10,"floor","","Returns the largest integer less than or equal to a number.",8,[[],["self"]]],[10,"ceil","","Returns the smallest integer greater than or equal to a…",8,[[],["self"]]],[10,"round","","Returns the nearest integer to a number. Round half-way…",8,[[],["self"]]],[10,"trunc","","Return the integer part of a number.",8,[[],["self"]]],[10,"fract","","Returns the fractional part of a number.",8,[[],["self"]]],[10,"abs","","Computes the absolute value of `self`. Returns…",8,[[],["self"]]],[10,"signum","","Returns a number that represents the sign of `self`.",8,[[],["self"]]],[10,"is_sign_positive","","Returns `true` if `self` is positive, including `+0.0`,…",8,[[],["bool"]]],[10,"is_sign_negative","","Returns `true` if `self` is negative, including `-0.0`,…",8,[[],["bool"]]],[10,"mul_add","","Fused multiply-add. Computes `(self * a) + b` with only…",8,[[],["self"]]],[10,"recip","","Take the reciprocal (inverse) of a number, `1/x`.",8,[[],["self"]]],[10,"powi","","Raise a number to an integer power.",8,[[["i32"]],["self"]]],[10,"powf","","Raise a number to a floating point power.",8,[[],["self"]]],[10,"sqrt","","Take the square root of a number.",8,[[],["self"]]],[10,"exp","","Returns `e^(self)`, (the exponential function).",8,[[],["self"]]],[10,"exp2","","Returns `2^(self)`.",8,[[],["self"]]],[10,"ln","","Returns the natural logarithm of the number.",8,[[],["self"]]],[10,"log","","Returns the logarithm of the number with respect to an…",8,[[],["self"]]],[10,"log2","","Returns the base 2 logarithm of the number.",8,[[],["self"]]],[10,"log10","","Returns the base 10 logarithm of the number.",8,[[],["self"]]],[11,"to_degrees","","Converts radians to degrees.",8,[[],["self"]]],[11,"to_radians","","Converts degrees to radians.",8,[[],["self"]]],[10,"max","","Returns the maximum of the two numbers.",8,[[],["self"]]],[10,"min","","Returns the minimum of the two numbers.",8,[[],["self"]]],[10,"abs_sub","","The positive difference of two numbers.",8,[[],["self"]]],[10,"cbrt","","Take the cubic root of a number.",8,[[],["self"]]],[10,"hypot","","Calculate the length of the hypotenuse of a right-angle…",8,[[],["self"]]],[10,"sin","","Computes the sine of a number (in radians).",8,[[],["self"]]],[10,"cos","","Computes the cosine of a number (in radians).",8,[[],["self"]]],[10,"tan","","Computes the tangent of a number (in radians).",8,[[],["self"]]],[10,"asin","","Computes the arcsine of a number. Return value is in…",8,[[],["self"]]],[10,"acos","","Computes the arccosine of a number. Return value is in…",8,[[],["self"]]],[10,"atan","","Computes the arctangent of a number. Return value is in…",8,[[],["self"]]],[10,"atan2","","Computes the four quadrant arctangent of `self` (`y`) and…",8,[[],["self"]]],[10,"sin_cos","","Simultaneously computes the sine and cosine of the number,…",8,[[]]],[10,"exp_m1","","Returns `e^(self) - 1` in a way that is accurate even if…",8,[[],["self"]]],[10,"ln_1p","","Returns `ln(1+n)` (natural logarithm) more accurately than…",8,[[],["self"]]],[10,"sinh","","Hyperbolic sine function.",8,[[],["self"]]],[10,"cosh","","Hyperbolic cosine function.",8,[[],["self"]]],[10,"tanh","","Hyperbolic tangent function.",8,[[],["self"]]],[10,"asinh","","Inverse hyperbolic sine function.",8,[[],["self"]]],[10,"acosh","","Inverse hyperbolic cosine function.",8,[[],["self"]]],[10,"atanh","","Inverse hyperbolic tangent function.",8,[[],["self"]]],[10,"integer_decode","","Returns the mantissa, base 2 exponent, and sign as…",8,[[]]],[8,"FloatConst","","",null,null],[10,"E","","Return Euler’s number.",9,[[],["self"]]],[10,"FRAC_1_PI","","Return `1.0 / π`.",9,[[],["self"]]],[10,"FRAC_1_SQRT_2","","Return `1.0 / sqrt(2.0)`.",9,[[],["self"]]],[10,"FRAC_2_PI","","Return `2.0 / π`.",9,[[],["self"]]],[10,"FRAC_2_SQRT_PI","","Return `2.0 / sqrt(π)`.",9,[[],["self"]]],[10,"FRAC_PI_2","","Return `π / 2.0`.",9,[[],["self"]]],[10,"FRAC_PI_3","","Return `π / 3.0`.",9,[[],["self"]]],[10,"FRAC_PI_4","","Return `π / 4.0`.",9,[[],["self"]]],[10,"FRAC_PI_6","","Return `π / 6.0`.",9,[[],["self"]]],[10,"FRAC_PI_8","","Return `π / 8.0`.",9,[[],["self"]]],[10,"LN_10","","Return `ln(10.0)`.",9,[[],["self"]]],[10,"LN_2","","Return `ln(2.0)`.",9,[[],["self"]]],[10,"LOG10_E","","Return `log10(e)`.",9,[[],["self"]]],[10,"LOG2_E","","Return `log2(e)`.",9,[[],["self"]]],[10,"PI","","Return Archimedes’ constant `π`.",9,[[],["self"]]],[10,"SQRT_2","","Return `sqrt(2.0)`.",9,[[],["self"]]],[11,"TAU","","Return the full circle constant `τ`.",9,[[],["self"]]],[0,"identities","num_traits","",null,null],[5,"zero","num_traits::identities","Returns the additive identity, `0`.",null,[[],["zero"]]],[5,"one","","Returns the multiplicative identity, `1`.",null,[[],["one"]]],[8,"Zero","","Defines an additive identity element for `Self`.",null,null],[10,"zero","","Returns the additive identity element of `Self`, `0`. #…",10,[[],["self"]]],[11,"set_zero","","Sets `self` to the additive identity element of `Self`, `0`.",10,[[["self"]]]],[10,"is_zero","","Returns `true` if `self` is equal to the additive identity.",10,[[["self"]],["bool"]]],[8,"One","","Defines a multiplicative identity element for `Self`.",null,null],[10,"one","","Returns the multiplicative identity element of `Self`, `1`.",11,[[],["self"]]],[11,"set_one","","Sets `self` to the multiplicative identity element of…",11,[[["self"]]]],[11,"is_one","","Returns `true` if `self` is equal to the multiplicative…",11,[[["self"]],["bool"]]],[0,"int","num_traits","",null,null],[8,"PrimInt","num_traits::int","Generic trait for primitive integers.",null,null],[10,"count_ones","","Returns the number of ones in the binary representation of…",12,[[],["u32"]]],[10,"count_zeros","","Returns the number of zeros in the binary representation…",12,[[],["u32"]]],[10,"leading_zeros","","Returns the number of leading zeros in the binary…",12,[[],["u32"]]],[10,"trailing_zeros","","Returns the number of trailing zeros in the binary…",12,[[],["u32"]]],[10,"rotate_left","","Shifts the bits to the left by a specified amount amount,…",12,[[["u32"]],["self"]]],[10,"rotate_right","","Shifts the bits to the right by a specified amount amount,…",12,[[["u32"]],["self"]]],[10,"signed_shl","","Shifts the bits to the left by a specified amount amount,…",12,[[["u32"]],["self"]]],[10,"signed_shr","","Shifts the bits to the right by a specified amount amount,…",12,[[["u32"]],["self"]]],[10,"unsigned_shl","","Shifts the bits to the left by a specified amount amount,…",12,[[["u32"]],["self"]]],[10,"unsigned_shr","","Shifts the bits to the right by a specified amount amount,…",12,[[["u32"]],["self"]]],[10,"swap_bytes","","Reverses the byte order of the integer.",12,[[],["self"]]],[10,"from_be","","Convert an integer from big endian to the target's…",12,[[],["self"]]],[10,"from_le","","Convert an integer from little endian to the target's…",12,[[],["self"]]],[10,"to_be","","Convert `self` to big endian from the target's endianness.",12,[[],["self"]]],[10,"to_le","","Convert `self` to little endian from the target's…",12,[[],["self"]]],[10,"pow","","Raises self to the power of `exp`, using exponentiation by…",12,[[["u32"]],["self"]]],[0,"ops","num_traits","",null,null],[0,"checked","num_traits::ops","",null,null],[8,"CheckedAdd","num_traits::ops::checked","Performs addition that returns `None` instead of wrapping…",null,null],[10,"checked_add","","Adds two numbers, checking for overflow. If overflow…",13,[[["self"]],["option"]]],[8,"CheckedSub","","Performs subtraction that returns `None` instead of…",null,null],[10,"checked_sub","","Subtracts two numbers, checking for underflow. If…",14,[[["self"]],["option"]]],[8,"CheckedMul","","Performs multiplication that returns `None` instead of…",null,null],[10,"checked_mul","","Multiplies two numbers, checking for underflow or…",15,[[["self"]],["option"]]],[8,"CheckedDiv","","Performs division that returns `None` instead of panicking…",null,null],[10,"checked_div","","Divides two numbers, checking for underflow, overflow and…",16,[[["self"]],["option"]]],[8,"CheckedRem","","Performs an integral remainder that returns `None` instead…",null,null],[10,"checked_rem","","Finds the remainder of dividing two numbers, checking for…",17,[[["self"]],["option"]]],[8,"CheckedNeg","","Performs negation that returns `None` if the result can't…",null,null],[10,"checked_neg","","Negates a number, returning `None` for results that can't…",18,[[["self"]],["option"]]],[8,"CheckedShl","","Performs a left shift that returns `None` on shifts larger…",null,null],[10,"checked_shl","","Checked shift left. Computes `self << rhs`, returning…",19,[[["u32"],["self"]],["option"]]],[8,"CheckedShr","","Performs a right shift that returns `None` on shifts…",null,null],[10,"checked_shr","","Checked shift right. Computes `self >> rhs`, returning…",20,[[["u32"],["self"]],["option"]]],[0,"inv","num_traits::ops","",null,null],[8,"Inv","num_traits::ops::inv","Unary operator for retrieving the multiplicative inverse,…",null,null],[16,"Output","","The result after applying the operator.",21,null],[10,"inv","","Returns the multiplicative inverse of `self`.",21,[[]]],[0,"mul_add","num_traits::ops","",null,null],[8,"MulAdd","num_traits::ops::mul_add","Fused multiply-add. Computes `(self * a) + b` with only…",null,null],[16,"Output","","The resulting type after applying the fused multiply-add.",22,null],[10,"mul_add","","Performs the fused multiply-add operation.",22,[[["a"],["b"]]]],[8,"MulAddAssign","","The fused multiply-add assignment operation.",null,null],[10,"mul_add_assign","","Performs the fused multiply-add operation.",23,[[["a"],["self"],["b"]]]],[0,"saturating","num_traits::ops","",null,null],[8,"Saturating","num_traits::ops::saturating","Saturating math operations",null,null],[10,"saturating_add","","Saturating addition operator. Returns a+b, saturating at…",24,[[],["self"]]],[10,"saturating_sub","","Saturating subtraction operator. Returns a-b, saturating…",24,[[],["self"]]],[0,"wrapping","num_traits::ops","",null,null],[8,"WrappingAdd","num_traits::ops::wrapping","Performs addition that wraps around on overflow.",null,null],[10,"wrapping_add","","Wrapping (modular) addition. Computes `self + other`,…",25,[[["self"]],["self"]]],[8,"WrappingSub","","Performs subtraction that wraps around on overflow.",null,null],[10,"wrapping_sub","","Wrapping (modular) subtraction. Computes `self - other`,…",26,[[["self"]],["self"]]],[8,"WrappingMul","","Performs multiplication that wraps around on overflow.",null,null],[10,"wrapping_mul","","Wrapping (modular) multiplication. Computes `self *…",27,[[["self"]],["self"]]],[8,"WrappingShl","","Performs a left shift that does not panic.",null,null],[10,"wrapping_shl","","Panic-free bitwise shift-left; yields `self << mask(rhs)`,…",28,[[["u32"],["self"]],["self"]]],[8,"WrappingShr","","Performs a right shift that does not panic.",null,null],[10,"wrapping_shr","","Panic-free bitwise shift-right; yields `self >>…",29,[[["u32"],["self"]],["self"]]],[0,"pow","num_traits","",null,null],[5,"pow","num_traits::pow","Raises a value to the power of exp, using exponentiation…",null,[[["one"],["usize"],["clone"],["mul"]],[["one"],["clone"],["mul"]]]],[5,"checked_pow","","Raises a value to the power of exp, returning `None` if an…",null,[[["one"],["usize"],["clone"],["checkedmul"]],[["option"],["one"],["clone"],["checkedmul"]]]],[8,"Pow","","Binary operator for raising a value to a power.",null,null],[16,"Output","","The result after applying the operator.",30,null],[10,"pow","","Returns `self` to the power `rhs`.",30,[[["rhs"]]]],[0,"real","num_traits","",null,null],[8,"Real","num_traits::real","A trait for real number types that do not necessarily have…",null,null],[10,"min_value","","Returns the smallest finite value that this type can…",31,[[],["self"]]],[10,"min_positive_value","","Returns the smallest positive, normalized value that this…",31,[[],["self"]]],[10,"epsilon","","Returns epsilon, a small positive value.",31,[[],["self"]]],[10,"max_value","","Returns the largest finite value that this type can…",31,[[],["self"]]],[10,"floor","","Returns the largest integer less than or equal to a number.",31,[[],["self"]]],[10,"ceil","","Returns the smallest integer greater than or equal to a…",31,[[],["self"]]],[10,"round","","Returns the nearest integer to a number. Round half-way…",31,[[],["self"]]],[10,"trunc","","Return the integer part of a number.",31,[[],["self"]]],[10,"fract","","Returns the fractional part of a number.",31,[[],["self"]]],[10,"abs","","Computes the absolute value of `self`. Returns…",31,[[],["self"]]],[10,"signum","","Returns a number that represents the sign of `self`.",31,[[],["self"]]],[10,"is_sign_positive","","Returns `true` if `self` is positive, including `+0.0`,…",31,[[],["bool"]]],[10,"is_sign_negative","","Returns `true` if `self` is negative, including `-0.0`,…",31,[[],["bool"]]],[10,"mul_add","","Fused multiply-add. Computes `(self * a) + b` with only…",31,[[],["self"]]],[10,"recip","","Take the reciprocal (inverse) of a number, `1/x`.",31,[[],["self"]]],[10,"powi","","Raise a number to an integer power.",31,[[["i32"]],["self"]]],[10,"powf","","Raise a number to a real number power.",31,[[],["self"]]],[10,"sqrt","","Take the square root of a number.",31,[[],["self"]]],[10,"exp","","Returns `e^(self)`, (the exponential function).",31,[[],["self"]]],[10,"exp2","","Returns `2^(self)`.",31,[[],["self"]]],[10,"ln","","Returns the natural logarithm of the number.",31,[[],["self"]]],[10,"log","","Returns the logarithm of the number with respect to an…",31,[[],["self"]]],[10,"log2","","Returns the base 2 logarithm of the number.",31,[[],["self"]]],[10,"log10","","Returns the base 10 logarithm of the number.",31,[[],["self"]]],[10,"to_degrees","","Converts radians to degrees.",31,[[],["self"]]],[10,"to_radians","","Converts degrees to radians.",31,[[],["self"]]],[10,"max","","Returns the maximum of the two numbers.",31,[[],["self"]]],[10,"min","","Returns the minimum of the two numbers.",31,[[],["self"]]],[10,"abs_sub","","The positive difference of two numbers.",31,[[],["self"]]],[10,"cbrt","","Take the cubic root of a number.",31,[[],["self"]]],[10,"hypot","","Calculate the length of the hypotenuse of a right-angle…",31,[[],["self"]]],[10,"sin","","Computes the sine of a number (in radians).",31,[[],["self"]]],[10,"cos","","Computes the cosine of a number (in radians).",31,[[],["self"]]],[10,"tan","","Computes the tangent of a number (in radians).",31,[[],["self"]]],[10,"asin","","Computes the arcsine of a number. Return value is in…",31,[[],["self"]]],[10,"acos","","Computes the arccosine of a number. Return value is in…",31,[[],["self"]]],[10,"atan","","Computes the arctangent of a number. Return value is in…",31,[[],["self"]]],[10,"atan2","","Computes the four quadrant arctangent of `self` (`y`) and…",31,[[],["self"]]],[10,"sin_cos","","Simultaneously computes the sine and cosine of the number,…",31,[[]]],[10,"exp_m1","","Returns `e^(self) - 1` in a way that is accurate even if…",31,[[],["self"]]],[10,"ln_1p","","Returns `ln(1+n)` (natural logarithm) more accurately than…",31,[[],["self"]]],[10,"sinh","","Hyperbolic sine function.",31,[[],["self"]]],[10,"cosh","","Hyperbolic cosine function.",31,[[],["self"]]],[10,"tanh","","Hyperbolic tangent function.",31,[[],["self"]]],[10,"asinh","","Inverse hyperbolic sine function.",31,[[],["self"]]],[10,"acosh","","Inverse hyperbolic cosine function.",31,[[],["self"]]],[10,"atanh","","Inverse hyperbolic tangent function.",31,[[],["self"]]],[0,"sign","num_traits","",null,null],[5,"abs","num_traits::sign","Computes the absolute value.",null,[[["signed"]],["signed"]]],[5,"abs_sub","","The positive difference of two numbers.",null,[[["signed"]],["signed"]]],[5,"signum","","Returns the sign of the number.",null,[[["signed"]],["signed"]]],[8,"Signed","","Useful functions for signed numbers (i.e. numbers that can…",null,null],[10,"abs","","Computes the absolute value.",32,[[["self"]],["self"]]],[10,"abs_sub","","The positive difference of two numbers.",32,[[["self"]],["self"]]],[10,"signum","","Returns the sign of the number.",32,[[["self"]],["self"]]],[10,"is_positive","","Returns true if the number is positive and false if the…",32,[[["self"]],["bool"]]],[10,"is_negative","","Returns true if the number is negative and false if the…",32,[[["self"]],["bool"]]],[8,"Unsigned","","A trait for values which cannot be negative",null,null],[8,"Num","num_traits","The base trait for numeric types, covering `0` and `1`…",null,null],[16,"FromStrRadixErr","","",33,null],[10,"from_str_radix","","Convert from a string and radix <= 36.",33,[[["str"],["u32"]],["result"]]],[8,"NumOps","","The trait for types implementing basic numeric operations",null,null],[8,"NumRef","","The trait for `Num` types which also implement numeric…",null,null],[8,"RefNum","","The trait for references which implement numeric…",null,null],[8,"NumAssignOps","","The trait for types implementing numeric assignment…",null,null],[8,"NumAssign","","The trait for `Num` types which also implement assignment…",null,null],[8,"NumAssignRef","","The trait for `NumAssign` types which also implement…",null,null],[11,"from","","",0,[[["t"]],["t"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"into","","",0,[[],["u"]]],[11,"try_into","","",0,[[],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"type_id","","",0,[[["self"]],["typeid"]]],[11,"to_string","","",0,[[["self"]],["string"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"into","","",1,[[],["u"]]],[11,"try_into","","",1,[[],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"type_id","","",1,[[["self"]],["typeid"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]]],"p":[[3,"ParseFloatError"],[4,"FloatErrorKind"],[8,"Bounded"],[8,"ToPrimitive"],[8,"FromPrimitive"],[8,"NumCast"],[8,"AsPrimitive"],[8,"FloatCore"],[8,"Float"],[8,"FloatConst"],[8,"Zero"],[8,"One"],[8,"PrimInt"],[8,"CheckedAdd"],[8,"CheckedSub"],[8,"CheckedMul"],[8,"CheckedDiv"],[8,"CheckedRem"],[8,"CheckedNeg"],[8,"CheckedShl"],[8,"CheckedShr"],[8,"Inv"],[8,"MulAdd"],[8,"MulAddAssign"],[8,"Saturating"],[8,"WrappingAdd"],[8,"WrappingSub"],[8,"WrappingMul"],[8,"WrappingShl"],[8,"WrappingShr"],[8,"Pow"],[8,"Real"],[8,"Signed"],[8,"Num"]]};
searchIndex["rust_eterm"] = {"doc":"","i":[[0,"error","rust_eterm","When serializing or deserializing Erlang binary terms goes…",null,null],[3,"Error","rust_eterm::error","",null,null],[4,"Category","","",null,null],[13,"Io","","",0,null],[13,"Syntax","","",0,null],[13,"Data","","",0,null],[13,"Eof","","",0,null],[4,"ErrorCode","","",null,null],[13,"Message","","Catchall for syntax error messages",1,null],[13,"Io","","",1,null],[13,"ValueNotEncodable","","",1,null],[6,"Result","","",null,null],[11,"line","","",2,[[["self"]],["usize"]]],[11,"column","","",2,[[["self"]],["usize"]]],[11,"classify","","",2,[[["self"]],["category"]]],[11,"is_io","","",2,[[["self"]],["bool"]]],[11,"is_syntax","","",2,[[["self"]],["bool"]]],[11,"is_data","","",2,[[["self"]],["bool"]]],[11,"is_eof","","",2,[[["self"]],["bool"]]],[11,"syntax","","",2,[[["errorcode"],["usize"]],["self"]]],[11,"io","","",2,[[["error"]],["self"]]],[11,"data","","",2,[[["errorcode"]],["self"]]],[11,"fix_position","","",2,[[["f"]],["self"]]],[0,"terms","rust_eterm","Partially implemented term types (into binary, String): *…",null,null],[3,"ETermBinary","rust_eterm::terms","Binary representation for an `ETerm`.",null,null],[3,"ENil","","Represents an Erlang `NIL_EXT` term.",null,null],[3,"EList","","Represents a proper `LIST_EXT` term with a `nil` tail.",null,null],[3,"ENonProperList","","Describes a `LIST_EXT` term with a possible non-`nil` tail.",null,null],[3,"EAtom","","Describes an `ATOM_UTF8_EXT` term and a…",null,null],[3,"EExport","","Describes an Erlang `EXPORT_EXT` term.",null,null],[3,"ETuple","","Represents a `LARGE_TUPLE_EXT` or a `SMALL_TUPLE_EXT` term…",null,null],[3,"EString","","Describes an `ATOM_UTF8_EXT` term and a…",null,null],[3,"EPort","","Describes an Erlang Port",null,null],[3,"EPid","","Describes an Erlang PID.",null,null],[3,"EMap","","Describes an Erlang Map",null,null],[7,"DIST_HDR","","This is the code of the start of a message",null,null],[7,"DIST_HDR_NORMAL","","The tag for a normal unfragmented and uncompressed…",null,null],[7,"DIST_HDR_FRAGMENTED","","The tag for a header stating that the message is fragmented.",null,null],[7,"DIST_HDR_FRAGMENT","","The tag denoting a follow-up fragment of apreviously…",null,null],[7,"DIST_HDR_COMPRESSED","","The tag denoting a compressed value (either a distribution…",null,null],[7,"ATOM_CACHE_REF","","Refers to the atom with AtomCacheReferenceIndex in the…",null,null],[7,"SMALL_INTEGER_EXT","","Unsigned 8-bit integer.",null,null],[7,"INTEGER_EXT","","Signed 32-bit integer.",null,null],[7,"FLOAT_EXT","","A finite float (i.e. not inf, -inf or NaN) is stored in…",null,null],[7,"PORT_EXT","","Same as [`NEW_PORT_EXT`] except the Creation field is only…",null,null],[7,"NEW_PORT_EXT","","Encodes a port identifier (obtained from…",null,null],[7,"PID_EXT","","Same as [`NEW_PID_EXT`] except the Creation field is only…",null,null],[7,"NEW_PID_EXT","","Encodes an Erlang process identifier object.",null,null],[7,"SMALL_TUPLE_EXT","","Encodes a tuple.",null,null],[7,"LARGE_TUPLE_EXT","","Same as [`SMALL_TUPLE_EXT`] except that Arity is an…",null,null],[7,"MAP_EXT","","Encodes a map.",null,null],[7,"NIL_EXT","","The representation for an empty list, that is, the Erlang…",null,null],[7,"STRING_EXT","","String does not have a corresponding Erlang…",null,null],[7,"LIST_EXT","","The representation for a non-empty list.",null,null],[7,"BINARY_EXT","","Binaries are byte-arrays. They are represented as…",null,null],[7,"SMALL_BIG_EXT","","Integer representation of an integer N where `-2^256 < N <…",null,null],[7,"LARGE_BIG_EXT","","Integer representation of an integer N where `-2^(2^32) <…",null,null],[7,"REFERENCE_EXT","","Deprecated method for encoding a reference term.",null,null],[7,"NEW_REFERENCE_EXT","","Deprecated method for encoding a reference term.",null,null],[7,"NEWER_REFERENCE_EXT","","Encodes a reference term.",null,null],[7,"FUN_EXT","","Old encoding of internal functions: `fun F/A and…",null,null],[7,"NEW_FUN_EXT","","Encoding of internal functions: `fun F/A and fun(Arg1,..)…",null,null],[7,"EXPORT_EXT","","Encodes functions of the shape `fun M:F/A`.",null,null],[7,"BIT_BINARY_EXT","","This term represents a bitstring whose length in bits does…",null,null],[7,"NEW_FLOAT_EXT","","This term represents a float",null,null],[7,"ATOM_UTF8_EXT","","This term represents an atom.",null,null],[7,"SMALL_ATOM_UTF8_EXT","","This term represents an atom that takes up at most 255…",null,null],[7,"ATOM_EXT","","This represents a LATIN-1 atom, but should not be encoded…",null,null],[7,"SMALL_ATOM_EXT","","This represents a LATIN-1 atom, but should not be encoded…",null,null],[8,"TryTo","","Replacement for `std::convert::TryInto<T>` that doesn't…",null,null],[10,"try_to","","",3,[[["self"]],[["error"],["result",["error"]]]]],[8,"To","","Replacement for `std::convert::Into<T>` that doesn't…",null,null],[10,"to","","",4,[[["self"]],["t"]]],[8,"ETerm","","A type that can be converted to an Erlang Binary Term…",null,null],[11,"try_to_binary","","",5,[[["self"]],[["error"],["result",["vec","error"]],["vec",["u8"]]]]],[11,"from","rust_eterm::error","",2,[[["t"]],["t"]]],[11,"into","","",2,[[],["u"]]],[11,"to_string","","",2,[[["self"]],["string"]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"try_into","","",2,[[],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"type_id","","",2,[[["self"]],["typeid"]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"into","","",0,[[],["u"]]],[11,"to_owned","","",0,[[["self"]],["t"]]],[11,"clone_into","","",0,[[["self"],["t"]]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"try_into","","",0,[[],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"type_id","","",0,[[["self"]],["typeid"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"into","","",1,[[],["u"]]],[11,"to_string","","",1,[[["self"]],["string"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"try_into","","",1,[[],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"type_id","","",1,[[["self"]],["typeid"]]],[11,"try_to","rust_eterm::terms","",6,[[["self"]],[["error"],["result",["error"]]]]],[11,"from","","",6,[[["t"]],["t"]]],[11,"into","","",6,[[],["u"]]],[11,"to_owned","","",6,[[["self"]],["t"]]],[11,"clone_into","","",6,[[["self"],["t"]]]],[11,"try_from","","",6,[[["u"]],["result"]]],[11,"try_into","","",6,[[],["result"]]],[11,"borrow","","",6,[[["self"]],["t"]]],[11,"borrow_mut","","",6,[[["self"]],["t"]]],[11,"type_id","","",6,[[["self"]],["typeid"]]],[11,"try_to","","",7,[[["self"]],[["error"],["result",["error"]]]]],[11,"from","","",7,[[["t"]],["t"]]],[11,"into","","",7,[[],["u"]]],[11,"to_string","","",7,[[["self"]],["string"]]],[11,"try_from","","",7,[[["u"]],["result"]]],[11,"try_into","","",7,[[],["result"]]],[11,"borrow","","",7,[[["self"]],["t"]]],[11,"borrow_mut","","",7,[[["self"]],["t"]]],[11,"type_id","","",7,[[["self"]],["typeid"]]],[11,"try_to","","",8,[[["self"]],[["error"],["result",["error"]]]]],[11,"from","","",8,[[["t"]],["t"]]],[11,"into","","",8,[[],["u"]]],[11,"to_string","","",8,[[["self"]],["string"]]],[11,"try_from","","",8,[[["u"]],["result"]]],[11,"try_into","","",8,[[],["result"]]],[11,"borrow","","",8,[[["self"]],["t"]]],[11,"borrow_mut","","",8,[[["self"]],["t"]]],[11,"type_id","","",8,[[["self"]],["typeid"]]],[11,"try_to","","",9,[[["self"]],[["error"],["result",["error"]]]]],[11,"from","","",9,[[["t"]],["t"]]],[11,"into","","",9,[[],["u"]]],[11,"to_string","","",9,[[["self"]],["string"]]],[11,"try_from","","",9,[[["u"]],["result"]]],[11,"try_into","","",9,[[],["result"]]],[11,"borrow","","",9,[[["self"]],["t"]]],[11,"borrow_mut","","",9,[[["self"]],["t"]]],[11,"type_id","","",9,[[["self"]],["typeid"]]],[11,"try_to","","",10,[[["self"]],[["error"],["result",["error"]]]]],[11,"from","","",10,[[["t"]],["t"]]],[11,"into","","",10,[[],["u"]]],[11,"to_string","","",10,[[["self"]],["string"]]],[11,"try_from","","",10,[[["u"]],["result"]]],[11,"try_into","","",10,[[],["result"]]],[11,"borrow","","",10,[[["self"]],["t"]]],[11,"borrow_mut","","",10,[[["self"]],["t"]]],[11,"type_id","","",10,[[["self"]],["typeid"]]],[11,"try_to","","",11,[[["self"]],[["error"],["result",["error"]]]]],[11,"from","","",11,[[["t"]],["t"]]],[11,"into","","",11,[[],["u"]]],[11,"to_string","","",11,[[["self"]],["string"]]],[11,"try_from","","",11,[[["u"]],["result"]]],[11,"try_into","","",11,[[],["result"]]],[11,"borrow","","",11,[[["self"]],["t"]]],[11,"borrow_mut","","",11,[[["self"]],["t"]]],[11,"type_id","","",11,[[["self"]],["typeid"]]],[11,"try_to","","",12,[[["self"]],[["error"],["result",["error"]]]]],[11,"from","","",12,[[["t"]],["t"]]],[11,"into","","",12,[[],["u"]]],[11,"to_string","","",12,[[["self"]],["string"]]],[11,"try_from","","",12,[[["u"]],["result"]]],[11,"try_into","","",12,[[],["result"]]],[11,"borrow","","",12,[[["self"]],["t"]]],[11,"borrow_mut","","",12,[[["self"]],["t"]]],[11,"type_id","","",12,[[["self"]],["typeid"]]],[11,"try_to","","",13,[[["self"]],[["error"],["result",["error"]]]]],[11,"from","","",13,[[["t"]],["t"]]],[11,"into","","",13,[[],["u"]]],[11,"to_string","","",13,[[["self"]],["string"]]],[11,"try_from","","",13,[[["u"]],["result"]]],[11,"try_into","","",13,[[],["result"]]],[11,"borrow","","",13,[[["self"]],["t"]]],[11,"borrow_mut","","",13,[[["self"]],["t"]]],[11,"type_id","","",13,[[["self"]],["typeid"]]],[11,"try_to","","",14,[[["self"]],[["error"],["result",["error"]]]]],[11,"from","","",14,[[["t"]],["t"]]],[11,"into","","",14,[[],["u"]]],[11,"to_string","","",14,[[["self"]],["string"]]],[11,"try_from","","",14,[[["u"]],["result"]]],[11,"try_into","","",14,[[],["result"]]],[11,"borrow","","",14,[[["self"]],["t"]]],[11,"borrow_mut","","",14,[[["self"]],["t"]]],[11,"type_id","","",14,[[["self"]],["typeid"]]],[11,"try_to","","",15,[[["self"]],[["error"],["result",["error"]]]]],[11,"from","","",15,[[["t"]],["t"]]],[11,"into","","",15,[[],["u"]]],[11,"to_string","","",15,[[["self"]],["string"]]],[11,"try_from","","",15,[[["u"]],["result"]]],[11,"try_into","","",15,[[],["result"]]],[11,"borrow","","",15,[[["self"]],["t"]]],[11,"borrow_mut","","",15,[[["self"]],["t"]]],[11,"type_id","","",15,[[["self"]],["typeid"]]],[11,"try_to","","",16,[[["self"]],[["error"],["result",["error"]]]]],[11,"from","","",16,[[["t"]],["t"]]],[11,"into","","",16,[[],["u"]]],[11,"to_string","","",16,[[["self"]],["string"]]],[11,"try_from","","",16,[[["u"]],["result"]]],[11,"try_into","","",16,[[],["result"]]],[11,"borrow","","",16,[[["self"]],["t"]]],[11,"borrow_mut","","",16,[[["self"]],["t"]]],[11,"type_id","","",16,[[["self"]],["typeid"]]],[11,"try_to","","",8,[[["self"]],[["result",["etermbinary","error"]],["etermbinary"],["error"]]]],[11,"try_to","","",9,[[["self"]],[["result",["etermbinary","error"]],["etermbinary"],["error"]]]],[11,"try_to","","",10,[[["self"]],[["result",["etermbinary","error"]],["etermbinary"],["error"]]]],[11,"try_to","","",11,[[["self"]],[["result",["etermbinary","error"]],["etermbinary"],["error"]]]],[11,"try_to","","",12,[[["self"]],[["result",["etermbinary","error"]],["etermbinary"],["error"]]]],[11,"try_to","","",13,[[["self"]],[["result",["etermbinary","error"]],["etermbinary"],["error"]]]],[11,"try_to","","",14,[[["self"]],[["result",["etermbinary","error"]],["etermbinary"],["error"]]]],[11,"try_to","","",15,[[["self"]],[["result",["etermbinary","error"]],["etermbinary"],["error"]]]],[11,"try_to","","",16,[[["self"]],[["result",["etermbinary","error"]],["etermbinary"],["error"]]]],[11,"to","","",6,[[["self"]],[["vec",["u8"]],["u8"]]]],[11,"to","","",7,[[["self"]],["etermbinary"]]],[11,"clone","rust_eterm::error","",0,[[["self"]],["category"]]],[11,"clone","rust_eterm::terms","",6,[[["self"]],["etermbinary"]]],[11,"eq","rust_eterm::error","",0,[[["self"],["category"]],["bool"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",2,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",1,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",2,[[["formatter"],["self"]],["result"]]],[11,"fmt","rust_eterm::terms","",7,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",8,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",9,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",10,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",11,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",12,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",13,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",14,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",15,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",16,[[["formatter"],["self"]],["result"]]],[11,"source","rust_eterm::error","",2,[[["self"]],[["option",["error"]],["error"]]]]],"p":[[4,"Category"],[4,"ErrorCode"],[3,"Error"],[8,"TryTo"],[8,"To"],[8,"ETerm"],[3,"ETermBinary"],[3,"ENil"],[3,"EList"],[3,"ENonProperList"],[3,"EAtom"],[3,"EExport"],[3,"ETuple"],[3,"EString"],[3,"EPort"],[3,"EPid"],[3,"EMap"]]};
addSearchOptions(searchIndex);initSearch(searchIndex);